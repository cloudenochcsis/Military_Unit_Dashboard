# Military Unit Dashboard - Simple MVP Django Project

## Project Overview
Build a simple Military Unit Dashboard web application using Django for Kubernetes deployment practice. This is an MVP (Minimum Viable Product) focused on basic functionality that a DevOps engineer can use to learn Kubernetes deployment, scaling, and management.

## Technology Stack
- **Backend:** Python/Django 4.2+
- **Database:** PostgreSQL
- **Frontend:** Django Templates with military-themed UI
- **Styling:** Custom CSS with military color scheme (olive green, khaki, dark gray)
- **Authentication:** Django's built-in authentication system with custom registration

## Core Features to Implement (MVP)

### 1. User Authentication & Registration
- User registration form for new users
- Login/logout functionality
- User profile page (basic info)
- Admin user can access Django admin panel
- Simple role assignment (Admin, Officer, Soldier) during registration

### 2. Simple Unit Roster
- Add, edit, delete, and view soldiers
- Basic soldier information:
  - Name, rank, email, phone
  - Status (Active, On Leave, Deployed)
- Simple list view with search by name

### 3. Basic Equipment Tracking
- Add, edit, delete, and view equipment
- Basic equipment information:
  - Equipment name, type, serial number
  - Status (Operational, Maintenance, Retired)
  - Assigned to (which soldier)
- Simple list view

### 4. Simple Dashboard
- Total counts: soldiers, equipment, operational equipment
- Basic charts showing equipment status distribution
- Lists of recent additions

### 5. Django Admin Panel
- Use Django's built-in admin for easy data management
- Configure admin for all models

## Technical Requirements

### Database Models (Simple)
Create basic Django models:
- User Profile (extend Django User with role field: Admin, Officer, Soldier)
- Soldier (name, rank, email, phone, status, service_number)
- Equipment (name, type, serial_number, status, assigned_to)

### Views and URLs
- Registration view with role selection
- Login/logout views
- User profile view
- Simple function-based views for CRUD operations
- Dashboard view with counts and basic charts

### Templates (Military-Themed)
- Base template with military color scheme and styling
- Navigation bar with military-style design
- Registration and login forms with military styling
- Dashboard with military-inspired layout
- Forms and tables with consistent military theme
- Use military fonts and color palette (olive green, khaki, dark gray, gold accents)

### Kubernetes Deployment Focus
- Include Dockerfile for containerization
- Include docker-compose.yml for local testing
- Keep the app stateless and container-friendly
- Use environment variables for database configuration
- Health check endpoints for Kubernetes probes

## Additional Features (Enhanced)
- User registration with role-based access
- Military-themed UI with appropriate colors and styling
- Basic search functionality using Django forms
- Military-style tables and forms
- User profile management
- Role-based navigation (different views for Admin vs Officer vs Soldier)

## Development Guidelines (Keep it Simple)
- Use Django's built-in features when possible
- Focus on functionality over aesthetics
- Include basic error handling
- Create simple seed data
- Use environment variables for configuration
- Include requirements.txt and Dockerfile

## Project Structure (Simplified)
```
military_dashboard/
├── manage.py
├── requirements.txt
├── Dockerfile
├── docker-compose.yml
├── README.md
├── military_dashboard/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── dashboard/
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── forms.py
│   └── admin.py
├── static/
│   ├── css/
│   │   └── military-theme.css (custom military styling)
│   ├── js/ (minimal if needed)
│   └── images/ (military icons/logos)
└── templates/
    ├── base.html (military-themed base template)
    ├── registration/
    │   ├── register.html
    │   ├── login.html
    │   └── profile.html
    ├── dashboard.html (military-styled dashboard)
    ├── soldier_list.html (military-themed table)
    ├── equipment_list.html (military-themed table)
    └── forms/ (military-styled forms)
```

## Military Theme Design Guidelines
- **Color Scheme**: Use military colors (olive green #556B2F, khaki #F0E68C, dark gray #2F4F4F, gold accents #FFD700)
- **Typography**: Clean, readable fonts that convey authority and professionalism
- **Layout**: Structured, organized layouts reminiscent of military documentation
- **Icons**: Use simple military-inspired icons (stars, chevrons, eagles) if needed
- **Forms**: Clean, well-organized forms with clear labels
- **Tables**: Stripe patterns, clear headers, military-style borders
- **Navigation**: Clean, hierarchical navigation with military styling
## Kubernetes Deployment Requirements
- **Dockerfile**: Multi-stage build for production
- **Health checks**: `/health/` endpoint for readiness/liveness probes
- **Environment variables**: Database connection, debug settings
- **Static files**: Properly configured for containerized deployment (including CSS/images)
- **Database migrations**: Handle in init container or startup script

## Deliverables
- Working Django MVP with user registration and military theme
- Custom CSS file with military styling
- Registration and authentication flow
- Dockerfile and docker-compose.yml
- Kubernetes deployment files (deployment.yaml, service.yaml, configmap.yaml)
- README with setup and deployment instructions
- Requirements.txt with minimal dependencies
- Sample data for testing with different user roles

## Success Criteria (Enhanced MVP)
- User registration and login work correctly
- Role-based access control functions
- Military theme is consistently applied
- Application runs in Docker container
- Basic CRUD operations work
- Dashboard shows simple metrics with military styling
- Ready for Kubernetes deployment
- Database connection works via environment variables
- Health check endpoints respond correctly

Please implement this as an enhanced MVP Django project with user registration and military-themed UI using Django templates. Focus on clean, military-inspired design while maintaining simplicity for Kubernetes deployment learning.