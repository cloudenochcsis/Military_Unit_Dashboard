# Military Unit Dashboard - Simple MVP Django Project

## Project Overview
Build a simple Military Unit Dashboard web application using Django for Kubernetes deployment practice. This is an MVP (Minimum Viable Product) focused on basic functionality that a DevOps engineer can use to learn Kubernetes deployment, scaling, and management.

## Technology Stack
- **Backend:** Python/Django 4.2+
- **Database:** PostgreSQL
- **Frontend:** Django Templates (similar to Jinja2) with basic HTML/CSS
- **Styling:** Minimal CSS or simple Bootstrap CDN (no complex JavaScript)
- **Authentication:** Django's built-in authentication system

## Core Features to Implement (MVP)

### 1. Basic User Authentication
- Simple login/logout (use Django's built-in auth)
- Admin user can access Django admin panel
- No registration - pre-create users

### 2. Simple Unit Roster
- Add, edit, delete, and view soldiers
- Basic soldier information:
  - Name, rank, email, phone
  - Status (Active, On Leave, Deployed)
- Simple list view with search by name

### 3. Basic Equipment Tracking
- Add, edit, delete, and view equipment
- Basic equipment information:
  - Equipment name, type, serial number
  - Status (Operational, Maintenance, Retired)
  - Assigned to (which soldier)
- Simple list view

### 4. Simple Dashboard
- Total counts: soldiers, equipment, operational equipment
- Basic charts showing equipment status distribution
- Lists of recent additions

### 5. Django Admin Panel
- Use Django's built-in admin for easy data management
- Configure admin for all models

## Technical Requirements

### Database Models (Simple)
Create basic Django models:
- Soldier (name, rank, email, phone, status)
- Equipment (name, type, serial_number, status, assigned_to)

### Views and URLs
- Simple function-based views
- Basic CRUD operations
- Dashboard view with counts and charts

### Templates (Basic HTML with Django Templates)
- Use Django's template engine (similar to Jinja2)
- Simple HTML structure with minimal CSS
- Basic forms using Django form rendering
- Simple table layouts for data display
- No complex JavaScript - keep it server-side rendered

### Kubernetes Deployment Focus
- Include Dockerfile for containerization
- Include docker-compose.yml for local testing
- Keep the app stateless and container-friendly
- Use environment variables for database configuration
- Health check endpoints for Kubernetes probes

## Additional Features (Optional)
- Basic search functionality using Django forms
- Simple HTML tables for data display
- Basic CSS styling (no frameworks needed)
- Server-side rendering only

## Development Guidelines (Keep it Simple)
- Use Django's built-in features when possible
- Focus on functionality over aesthetics
- Include basic error handling
- Create simple seed data
- Use environment variables for configuration
- Include requirements.txt and Dockerfile

## Project Structure (Simplified)
```
military_dashboard/
├── manage.py
├── requirements.txt
├── Dockerfile
├── docker-compose.yml
├── README.md
├── military_dashboard/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── dashboard/
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── forms.py
│   └── admin.py
├── static/
│   ├── css/
│   └── js/
└── templates/
    ├── base.html (basic HTML structure)
    ├── dashboard.html (simple dashboard with counts)
    ├── soldier_list.html (HTML table)
    ├── equipment_list.html (HTML table)
    └── forms/ (basic Django forms)
```

## Kubernetes Deployment Requirements
- **Dockerfile**: Multi-stage build for production
- **Health checks**: `/health/` endpoint for readiness/liveness probes
- **Environment variables**: Database connection, debug settings
- **Static files**: Properly configured for containerized deployment
- **Database migrations**: Handle in init container or startup script

## Deliverables
- Working Django MVP with basic functionality
- Dockerfile and docker-compose.yml
- Kubernetes deployment files (deployment.yaml, service.yaml, configmap.yaml)
- README with setup and deployment instructions
- Requirements.txt with minimal dependencies
- Sample data for testing

## Success Criteria (MVP)
- Application runs in Docker container
- Basic CRUD operations work
- Dashboard shows simple metrics
- Ready for Kubernetes deployment
- Database connection works via environment variables
- Health check endpoints respond correctly

Please implement this as a simple MVP Django project with basic HTML templating (using Django's template engine which is similar to Jinja2). Focus on server-side rendering with minimal CSS and no complex frontend frameworks. The goal is to have a working application that can be easily deployed and managed in Kubernetes for learning purposes.